import os
import glob
import json
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

MODULAR_DIR = os.path.dirname(os.path.abspath(__file__))

# --- 1. Find the latest flight log ---
def find_latest_log():
    logs = sorted(
        glob.glob(os.path.join(MODULAR_DIR, 'flight_log_*.json')) +
        glob.glob(os.path.join(MODULAR_DIR, 'flight_log_*.md')),
        key=os.path.getmtime, reverse=True
    )
    return logs[0] if logs else None

# --- 2. Load log data ---
def load_log(filepath):
    if filepath.endswith('.json'):
        with open(filepath, encoding='utf-8') as f:
            data = json.load(f)
        return data
    elif filepath.endswith('.md'):
        # Minimal parser for markdown logs (for demo, recommend using JSON logs for full features)
        with open(filepath, encoding='utf-8') as f:
            lines = f.readlines()
        # Parse summary and table
        summary = [line.strip() for line in lines if line.startswith('-')]
        table_start = next((i for i, l in enumerate(lines) if l.strip().startswith('| Time')), None)
        table = []
        if table_start is not None:
            for l in lines[table_start+2:]:
                if not l.strip().startswith('|'):
                    break
                table.append([x.strip() for x in l.strip().strip('|').split('|')])
        return {'summary': summary, 'table': table}
    else:
        raise ValueError('Unsupported log format')

# --- 3. Generate plots ---
def plot_altitude_turbulence(log_data, outdir):
    times = [row['time'] for row in log_data['telemetry']]
    altitudes = [row['altitude'] for row in log_data['telemetry']]
    turbulence = [row['turbulence'] for row in log_data['telemetry']]
    # Map turbulence to numeric for plotting
    turb_map = {'Calm': 0, 'Moderate': 1, 'Heavy': 2}
    turb_numeric = [turb_map.get(t, 0) for t in turbulence]
    # Altitude plot
    plt.figure(figsize=(8,4))
    plt.plot(times, altitudes, marker='o', label='Altitude (%)')
    plt.title('Flight Altitude Profile')
    plt.xlabel('Time')
    plt.ylabel('Altitude (%)')
    plt.grid(True)
    plt.tight_layout()
    alt_path = os.path.join(outdir, 'altitude_plot.png')
    plt.savefig(alt_path)
    plt.close()
    # Turbulence plot
    plt.figure(figsize=(8,2))
    plt.plot(times, turb_numeric, marker='s', color='orange', label='Turbulence')
    plt.yticks([0,1,2], ['Calm','Moderate','Heavy'])
    plt.title('Turbulence Profile')
    plt.xlabel('Time')
    plt.tight_layout()
    turb_path = os.path.join(outdir, 'turbulence_plot.png')
    plt.savefig(turb_path)
    plt.close()
    return alt_path, turb_path

# --- 4. Write Markdown Report ---
def write_markdown_report(log_data, alt_img, turb_img, outpath):
    with open(outpath, 'w', encoding='utf-8') as f:
        f.write(f"# üõ´ Flight Simulation Report\n\n")
        f.write(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        # Summary
        f.write(f"## ‚úàÔ∏è Flight Summary\n\n")
        for k in ['ticker','date','mode','net_gain','max_altitude','fuel_remaining','stall_events','emergency_landings']:
            if k in log_data:
                f.write(f"- **{k.replace('_',' ').title()}:** {log_data[k]}\n")
        f.write("\n")
        # Plots
        f.write(f"## üìà Altitude Profile\n\n![]({os.path.basename(alt_img)})\n\n")
        f.write(f"## üå™Ô∏è Turbulence Profile\n\n![]({os.path.basename(turb_img)})\n\n")
        # Candle Table
        f.write(f"## üïØÔ∏è Candle Phase Table\n\n")
        f.write("| Time | Altitude (%) | Fuel (%) | Stall | Turbulence | Phase | Status |\n")
        f.write("|------|--------------|----------|-------|------------|-------|--------|\n")
        for row in log_data['telemetry']:
            f.write(f"| {row['time']} | {row['altitude']:+.2f} | {row['fuel']:.1f} | {'Yes' if row['stall'] else 'No'} | {row['turbulence']} | {row['phase']} | {row['status']} |\n")
        f.write("\n")
        f.write("---\n\n_Report generated by generate_flight_report.py_\n")

if __name__ == "__main__":
    latest_log = find_latest_log()
    if not latest_log:
        print("No flight log found in modular directory.")
        exit(1)
    print(f"Using log: {os.path.basename(latest_log)}")
    log_data = load_log(latest_log)
    # If markdown, skip plots and just reformat
    if latest_log.endswith('.json'):
        alt_img, turb_img = plot_altitude_turbulence(log_data, MODULAR_DIR)
        report_path = os.path.join(MODULAR_DIR, 'flight_report.md')
        write_markdown_report(log_data, alt_img, turb_img, report_path)
        print(f"Flight report generated: {report_path}")
    else:
        # For markdown logs, just copy summary/table to report
        report_path = os.path.join(MODULAR_DIR, 'flight_report.md')
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(f"# üõ´ Flight Simulation Report\n\n")
            f.write(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"## ‚úàÔ∏è Flight Summary\n\n")
            for line in log_data['summary']:
                f.write(line + '\n')
            f.write("\n## üïØÔ∏è Candle Phase Table\n\n")
            f.write("| Time | Altitude (%) | Fuel (%) | Stall | Turbulence | Phase | Status |\n")
            f.write("|------|--------------|----------|-------|------------|-------|--------|\n")
            for row in log_data['table']:
                f.write("| " + " | ".join(row) + " |\n")
            f.write("\n---\n\n_Report generated by generate_flight_report.py_\n")
        print(f"Flight report generated: {report_path}") 